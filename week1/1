`timescale 1ns / 1ns

module pattern
#(parameter idle=3'd0, s1=3'd1, s2=3'd2, s3=3'd3, s4=3'd4, s5=3'd5)
( output reg flag,
  input [15:0] data,
  input clk, rst
);

//integer i;
reg [2:0] cnt;
reg [2:0] next_cnt;

always @ (posedge clk or negedge rst)
 begin
  if(rst==0)
   begin
   flag <= 1'b0;
   cnt <= idle;
   end
  else
   begin
   if(cnt==s5)
    flag <= 1'b1;
   else
    cnt <= next_cnt;
   end
 end

always @ (*)
 integer i;
 begin
  if(cnt!=s5)
   begin
   for(i=0;i<=15;i=i+1)
   case({cnt,data[15-i]})
    {idle,1'b0}: next_cnt <= idle;
    {idle,1'b1}: next_cnt <= s1;
    {s1,1'b0}: next_cnt <= idle;
    {s1,1'b1}: next_cnt <= s2;
    {s2,1'b0}: next_cnt <= s3;
    {s2,1'b1}: next_cnt <= s2;
    {s3,1'b0}: next_cnt <= s4;
    {s3,1'b1}: next_cnt <= s1;
    {s4,1'b0}: next_cnt <= idle;
    {s4,1'b1}: next_cnt <= s5;
    endcase
   end
  else
   next_cnt <= s5;
 end
  

endmodule 


